"""
Generated by qenerate plugin=pydantic_v1. DO NOT MODIFY MANUALLY!
"""
from typing import (  # noqa: F401 # pylint: disable=W0611
    Any,
    Callable,
    Optional,
    Union,
)

from pydantic import (  # noqa: F401 # pylint: disable=W0611
    BaseModel,
    Extra,
    Field,
    Json,
)

from reconcile.gql_definitions.common_fragments.vault_secret import VaultSecret


DEFINITION = """
fragment VaultSecret on VaultSecret_v1 {
    path
    field
    version
    format
}

query ClusterPeering {
  clusters: clusters_v1
  {
    path
    name
    ocm {
      name
      url
      accessTokenClientId
      accessTokenUrl
      offlineToken {
        ... VaultSecret
      }
      blockedVersions
    }
    awsInfrastructureManagementAccounts {
      account {
        name
        uid
        terraformUsername
        resourcesDefaultRegion
        automationToken {
          ... VaultSecret
        }
      }
      accessLevel
      default
    }

    spec {
      region
    }
    network {
      vpc
    }
    peering {
      connections {
        name
        provider
        manageRoutes
        delete
        ... on ClusterPeeringConnectionAccount_v1 {
          vpc {
            account {
              name
              uid
              terraformUsername
              automationToken {
                ... VaultSecret
              }
            }
            vpc_id
            cidr_block
            region
          }
          assumeRole
        }
        ... on ClusterPeeringConnectionAccountVPCMesh_v1 {
          account {
            name
            uid
            terraformUsername
            automationToken {
              ... VaultSecret
            }
          }
          tags
        }
        ... on ClusterPeeringConnectionAccountTGW_v1 {
          account {
            name
            uid
            terraformUsername
            automationToken {
              ... VaultSecret
            }
          }
          tags
          cidrBlock
          manageSecurityGroups
          assumeRole
        }
        ... on ClusterPeeringConnectionClusterRequester_v1 {
          cluster {
            name
            network {
              vpc
            }
            spec {
              region
            }
            awsInfrastructureManagementAccounts {
              account {
                name
                uid
                terraformUsername
                resourcesDefaultRegion
                automationToken {
                  ... VaultSecret
                }
              }
              accessLevel
              default
            }

            peering {
              connections {
                name
                provider
                manageRoutes
                ... on ClusterPeeringConnectionClusterAccepter_v1 {
                  name
                  cluster {
                    name
                  }
                  awsInfrastructureManagementAccount {
                    name
                    uid
                    terraformUsername
                    automationToken {
                      ... VaultSecret
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    disable {
      integrations
    }
  }
}
"""


class OpenShiftClusterManagerV1(BaseModel):
    name: str = Field(..., alias="name")
    url: str = Field(..., alias="url")
    access_token_client_id: str = Field(..., alias="accessTokenClientId")
    access_token_url: str = Field(..., alias="accessTokenUrl")
    offline_token: Optional[VaultSecret] = Field(..., alias="offlineToken")
    blocked_versions: Optional[list[str]] = Field(..., alias="blockedVersions")

    class Config:
        smart_union = True
        extra = Extra.forbid


class AWSAccountV1(BaseModel):
    name: str = Field(..., alias="name")
    uid: str = Field(..., alias="uid")
    terraform_username: Optional[str] = Field(..., alias="terraformUsername")
    resources_default_region: str = Field(..., alias="resourcesDefaultRegion")
    automation_token: VaultSecret = Field(..., alias="automationToken")

    class Config:
        smart_union = True
        extra = Extra.forbid


class AWSInfrastructureManagementAccountV1(BaseModel):
    account: AWSAccountV1 = Field(..., alias="account")
    access_level: str = Field(..., alias="accessLevel")
    default: Optional[bool] = Field(..., alias="default")

    class Config:
        smart_union = True
        extra = Extra.forbid


class ClusterSpecV1(BaseModel):
    region: str = Field(..., alias="region")

    class Config:
        smart_union = True
        extra = Extra.forbid


class ClusterNetworkV1(BaseModel):
    vpc: str = Field(..., alias="vpc")

    class Config:
        smart_union = True
        extra = Extra.forbid


class ClusterPeeringConnectionV1(BaseModel):
    name: str = Field(..., alias="name")
    provider: str = Field(..., alias="provider")
    manage_routes: Optional[bool] = Field(..., alias="manageRoutes")
    delete: Optional[bool] = Field(..., alias="delete")

    class Config:
        smart_union = True
        extra = Extra.forbid


class AWSVPCV1_AWSAccountV1(BaseModel):
    name: str = Field(..., alias="name")
    uid: str = Field(..., alias="uid")
    terraform_username: Optional[str] = Field(..., alias="terraformUsername")
    automation_token: VaultSecret = Field(..., alias="automationToken")

    class Config:
        smart_union = True
        extra = Extra.forbid


class AWSVPCV1(BaseModel):
    account: AWSVPCV1_AWSAccountV1 = Field(..., alias="account")
    vpc_id: str = Field(..., alias="vpc_id")
    cidr_block: str = Field(..., alias="cidr_block")
    region: str = Field(..., alias="region")

    class Config:
        smart_union = True
        extra = Extra.forbid


class ClusterPeeringConnectionAccountV1(ClusterPeeringConnectionV1):
    vpc: AWSVPCV1 = Field(..., alias="vpc")
    assume_role: Optional[str] = Field(..., alias="assumeRole")

    class Config:
        smart_union = True
        extra = Extra.forbid


class ClusterPeeringConnectionAccountVPCMeshV1_AWSAccountV1(BaseModel):
    name: str = Field(..., alias="name")
    uid: str = Field(..., alias="uid")
    terraform_username: Optional[str] = Field(..., alias="terraformUsername")
    automation_token: VaultSecret = Field(..., alias="automationToken")

    class Config:
        smart_union = True
        extra = Extra.forbid


class ClusterPeeringConnectionAccountVPCMeshV1(ClusterPeeringConnectionV1):
    account: ClusterPeeringConnectionAccountVPCMeshV1_AWSAccountV1 = Field(
        ..., alias="account"
    )
    tags: Optional[Json] = Field(..., alias="tags")

    class Config:
        smart_union = True
        extra = Extra.forbid


class ClusterPeeringConnectionAccountTGWV1_AWSAccountV1(BaseModel):
    name: str = Field(..., alias="name")
    uid: str = Field(..., alias="uid")
    terraform_username: Optional[str] = Field(..., alias="terraformUsername")
    automation_token: VaultSecret = Field(..., alias="automationToken")

    class Config:
        smart_union = True
        extra = Extra.forbid


class ClusterPeeringConnectionAccountTGWV1(ClusterPeeringConnectionV1):
    account: ClusterPeeringConnectionAccountTGWV1_AWSAccountV1 = Field(
        ..., alias="account"
    )
    tags: Optional[Json] = Field(..., alias="tags")
    cidr_block: Optional[str] = Field(..., alias="cidrBlock")
    manage_security_groups: Optional[bool] = Field(..., alias="manageSecurityGroups")
    assume_role: Optional[str] = Field(..., alias="assumeRole")

    class Config:
        smart_union = True
        extra = Extra.forbid


class ClusterPeeringConnectionClusterRequesterV1_ClusterV1_ClusterNetworkV1(BaseModel):
    vpc: str = Field(..., alias="vpc")

    class Config:
        smart_union = True
        extra = Extra.forbid


class ClusterPeeringConnectionClusterRequesterV1_ClusterV1_ClusterSpecV1(BaseModel):
    region: str = Field(..., alias="region")

    class Config:
        smart_union = True
        extra = Extra.forbid


class ClusterPeeringConnectionClusterRequesterV1_ClusterV1_AWSInfrastructureManagementAccountV1_AWSAccountV1(
    BaseModel
):
    name: str = Field(..., alias="name")
    uid: str = Field(..., alias="uid")
    terraform_username: Optional[str] = Field(..., alias="terraformUsername")
    resources_default_region: str = Field(..., alias="resourcesDefaultRegion")
    automation_token: VaultSecret = Field(..., alias="automationToken")

    class Config:
        smart_union = True
        extra = Extra.forbid


class ClusterPeeringConnectionClusterRequesterV1_ClusterV1_AWSInfrastructureManagementAccountV1(
    BaseModel
):
    account: ClusterPeeringConnectionClusterRequesterV1_ClusterV1_AWSInfrastructureManagementAccountV1_AWSAccountV1 = Field(
        ..., alias="account"
    )
    access_level: str = Field(..., alias="accessLevel")
    default: Optional[bool] = Field(..., alias="default")

    class Config:
        smart_union = True
        extra = Extra.forbid


class ClusterPeeringConnectionClusterRequesterV1_ClusterV1_ClusterPeeringV1_ClusterPeeringConnectionV1(
    BaseModel
):
    name: str = Field(..., alias="name")
    provider: str = Field(..., alias="provider")
    manage_routes: Optional[bool] = Field(..., alias="manageRoutes")

    class Config:
        smart_union = True
        extra = Extra.forbid


class ClusterPeeringConnectionClusterAccepterV1_ClusterV1(BaseModel):
    name: str = Field(..., alias="name")

    class Config:
        smart_union = True
        extra = Extra.forbid


class ClusterPeeringConnectionClusterAccepterV1_AWSAccountV1(BaseModel):
    name: str = Field(..., alias="name")
    uid: str = Field(..., alias="uid")
    terraform_username: Optional[str] = Field(..., alias="terraformUsername")
    automation_token: VaultSecret = Field(..., alias="automationToken")

    class Config:
        smart_union = True
        extra = Extra.forbid


class ClusterPeeringConnectionClusterAccepterV1(
    ClusterPeeringConnectionClusterRequesterV1_ClusterV1_ClusterPeeringV1_ClusterPeeringConnectionV1
):
    name: str = Field(..., alias="name")
    cluster: ClusterPeeringConnectionClusterAccepterV1_ClusterV1 = Field(
        ..., alias="cluster"
    )
    aws_infrastructure_management_account: Optional[
        ClusterPeeringConnectionClusterAccepterV1_AWSAccountV1
    ] = Field(..., alias="awsInfrastructureManagementAccount")

    class Config:
        smart_union = True
        extra = Extra.forbid


class ClusterPeeringConnectionClusterRequesterV1_ClusterV1_ClusterPeeringV1(BaseModel):
    connections: list[
        Union[
            ClusterPeeringConnectionClusterAccepterV1,
            ClusterPeeringConnectionClusterRequesterV1_ClusterV1_ClusterPeeringV1_ClusterPeeringConnectionV1,
        ]
    ] = Field(..., alias="connections")

    class Config:
        smart_union = True
        extra = Extra.forbid


class ClusterPeeringConnectionClusterRequesterV1_ClusterV1(BaseModel):
    name: str = Field(..., alias="name")
    network: Optional[
        ClusterPeeringConnectionClusterRequesterV1_ClusterV1_ClusterNetworkV1
    ] = Field(..., alias="network")
    spec: Optional[
        ClusterPeeringConnectionClusterRequesterV1_ClusterV1_ClusterSpecV1
    ] = Field(..., alias="spec")
    aws_infrastructure_management_accounts: Optional[
        list[
            ClusterPeeringConnectionClusterRequesterV1_ClusterV1_AWSInfrastructureManagementAccountV1
        ]
    ] = Field(..., alias="awsInfrastructureManagementAccounts")
    peering: Optional[
        ClusterPeeringConnectionClusterRequesterV1_ClusterV1_ClusterPeeringV1
    ] = Field(..., alias="peering")

    class Config:
        smart_union = True
        extra = Extra.forbid


class ClusterPeeringConnectionClusterRequesterV1(ClusterPeeringConnectionV1):
    cluster: ClusterPeeringConnectionClusterRequesterV1_ClusterV1 = Field(
        ..., alias="cluster"
    )

    class Config:
        smart_union = True
        extra = Extra.forbid


class ClusterPeeringV1(BaseModel):
    connections: list[
        Union[
            ClusterPeeringConnectionAccountTGWV1,
            ClusterPeeringConnectionAccountV1,
            ClusterPeeringConnectionAccountVPCMeshV1,
            ClusterPeeringConnectionClusterRequesterV1,
            ClusterPeeringConnectionV1,
        ]
    ] = Field(..., alias="connections")

    class Config:
        smart_union = True
        extra = Extra.forbid


class DisableClusterAutomationsV1(BaseModel):
    integrations: Optional[list[str]] = Field(..., alias="integrations")

    class Config:
        smart_union = True
        extra = Extra.forbid


class ClusterV1(BaseModel):
    path: str = Field(..., alias="path")
    name: str = Field(..., alias="name")
    ocm: Optional[OpenShiftClusterManagerV1] = Field(..., alias="ocm")
    aws_infrastructure_management_accounts: Optional[
        list[AWSInfrastructureManagementAccountV1]
    ] = Field(..., alias="awsInfrastructureManagementAccounts")
    spec: Optional[ClusterSpecV1] = Field(..., alias="spec")
    network: Optional[ClusterNetworkV1] = Field(..., alias="network")
    peering: Optional[ClusterPeeringV1] = Field(..., alias="peering")
    disable: Optional[DisableClusterAutomationsV1] = Field(..., alias="disable")

    class Config:
        smart_union = True
        extra = Extra.forbid


class ClusterPeeringQueryData(BaseModel):
    clusters: Optional[list[ClusterV1]] = Field(..., alias="clusters")

    class Config:
        smart_union = True
        extra = Extra.forbid


def query(query_func: Callable, **kwargs) -> ClusterPeeringQueryData:
    """
    This is a convenience function which queries and parses the data into
    concrete types. It should be compatible with most GQL clients.
    You do not have to use it to consume the generated data classes.
    Alternatively, you can also mime and alternate the behavior
    of this function in the caller.

    Parameters:
        query_func (Callable): Function which queries your GQL Server
        kwargs: optional arguments that will be passed to the query function

    Returns:
        ClusterPeeringQueryData: queried data parsed into generated classes
    """
    raw_data: dict[Any, Any] = query_func(DEFINITION, **kwargs)
    return ClusterPeeringQueryData(**raw_data)
